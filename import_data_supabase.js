/**
 * Script para importar dados de exemplo no Supabase - RegiFlex
 * 
 * INSTRU√á√ïES DE USO:
 * 1. Instale as depend√™ncias: npm install @supabase/supabase-js
 * 2. Configure as vari√°veis SUPABASE_URL e SUPABASE_KEY abaixo
 * 3. Execute: node import_data_supabase.js
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';

// ====== CONFIGURA√á√ÉO ======
const SUPABASE_URL = 'https://upbsldljfejaieuveknr.supabase.co'; // Ex: https://xxxxx.supabase.co
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVwYnNsZGxqZmVqYWlldXZla25yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk5MDU5MzYsImV4cCI6MjA3NTQ4MTkzNn0.0Sw_uG6Vs-a69navV4CJ48qKAeX3qym9NLKIL7hIevk';   // Chave anon/service_role

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// ====== DADOS DE EXEMPLO ======

// Lista de nomes para pacientes (50 nomes)
const nomesPacientes = [
  'Ana Silva', 'Carlos Santos', 'Maria Oliveira', 'Jo√£o Souza', 'Paula Costa',
  'Roberto Lima', 'Juliana Ferreira', 'Fernando Alves', 'Camila Rodrigues', 'Bruno Martins',
  'Beatriz Pereira', 'Lucas Carvalho', 'Mariana Gomes', 'Rafael Ribeiro', 'Amanda Dias',
  'Pedro Ara√∫jo', 'Gabriela Fernandes', 'Thiago Barbosa', 'Larissa Cardoso', 'Gustavo Nascimento',
  'Let√≠cia Monteiro', 'Matheus Correia', 'Isabela Castro', 'Vin√≠cius Rocha', 'Carolina Pinto',
  'Leonardo Teixeira', 'Nat√°lia Mendes', 'Rodrigo Moreira', 'Fernanda Freitas', 'Daniel Soares',
  'Aline Cavalcanti', 'Marcelo Batista', 'Patr√≠cia Nunes', 'Andr√© Campos', 'Bianca Azevedo',
  'Felipe Ramos', 'J√©ssica Moura', 'Diego Machado', 'Renata Borges', 'F√°bio Duarte',
  'Vanessa Reis', 'Leandro Pires', 'Priscila Lopes', 'Ricardo Farias', 'Tatiana Melo',
  'Alexandre Nogueira', 'Adriana Vieira', 'Maur√≠cio Barros', 'Cristina Amaral', 'Eduardo Cunha'
];

// Lista de nomes para psic√≥logos (5 psic√≥logos)
const nomesPsicologos = [
  { nome: 'Dra. Claudia Mendes', crp: 'CRP 01/12345', especialidade: 'Terapia Cognitivo-Comportamental' },
  { nome: 'Dr. Roberto Almeida', crp: 'CRP 01/23456', especialidade: 'Psican√°lise' },
  { nome: 'Dra. Fernanda Costa', crp: 'CRP 01/34567', especialidade: 'Psicologia Cl√≠nica' },
  { nome: 'Dr. Marcos Silva', crp: 'CRP 01/45678', especialidade: 'Psicoterapia Breve' },
  { nome: 'Dra. Patricia Rocha', crp: 'CRP 01/56789', especialidade: 'Psicologia Infantil' }
];

// ====== FUN√á√ïES AUXILIARES ======

function gerarCPF() {
  const n = Math.floor(Math.random() * 100000000000);
  return n.toString().padStart(11, '0');
}

function gerarTelefone() {
  const ddd = Math.floor(Math.random() * 90) + 11;
  const num = Math.floor(Math.random() * 900000000) + 100000000;
  return `(${ddd}) ${num.toString().slice(0, 5)}-${num.toString().slice(5)}`;
}

function gerarEmail(nome) {
  const normalizado = nome.toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/\s+/g, '.');
  return `${normalizado}@email.com`;
}

// ====== IMPORTA√á√ÉO DE DADOS ======

async function limparDados() {
  console.log('\nüóëÔ∏è  Limpando dados existentes...');
  
  try {
    // Deletar na ordem correta (por causa das foreign keys)
    await supabase.from("sessoes").delete().neq("id", 0);
    await supabase.from("pacientes").delete().neq("id", 0);
    await supabase.from("usuarios").delete().neq("id", 0); // Alterado de 'users' para 'usuarios'
    
    console.log('‚úÖ Dados limpos com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados:', error.message);
  }
}

async function criarPsicologos() {
  console.log('\nüë®‚Äç‚öïÔ∏è  Criando psic√≥logos...');
  
  const psicologos = nomesPsicologos.map((psi, index) => ({
    nome_completo: psi.nome,
    email: gerarEmail(psi.nome),
    role: 'psicologo',
    username: gerarEmail(psi.nome).split('@')[0],
    password_hash: 'dummy_password_hash' // Adicionando um hash de senha padr√£o
  }));
  
  try {
    const { data, error } = await supabase
      .from('usuarios')
      .insert(psicologos)
      .select();
    
    if (error) throw error;
    
    console.log(`‚úÖ ${data.length} psic√≥logos criados com sucesso!`);
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao criar psic√≥logos:', error.message);
    return [];
  }
}

async function criarPacientes() {
  console.log('\nüë• Criando pacientes...');
  
  const pacientes = nomesPacientes.map(nome => ({
    nome_completo: nome,
    cpf: gerarCPF(),
    data_nascimento: new Date(
      1970 + Math.floor(Math.random() * 40),
      Math.floor(Math.random() * 12),
      Math.floor(Math.random() * 28) + 1
    ).toISOString().split('T')[0],
    telefone: gerarTelefone(),
    email: gerarEmail(nome),
    endereco: `Rua ${Math.floor(Math.random() * 1000)}, ${Math.floor(Math.random() * 500)}`,
    qr_code_data: `dummy_qr_code_${Math.random().toString(36).substring(7)}`, // Adicionando um valor padr√£o
    // observacoes: null - Removido pois n√£o existe na tabela pacientes
  }));
  
  try {
    const { data, error } = await supabase
      .from('pacientes')
      .insert(pacientes)
      .select();
    
    if (error) throw error;
    
    console.log(`‚úÖ ${data.length} pacientes criados com sucesso!`);
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao criar pacientes:', error.message);
    return [];
  }
}

async function importarSessoes(pacientes, psicologos) {
  console.log('\nüìÖ Importando sess√µes...');
  
  // Carregar dados do JSON gerado
  let sessoesData;
  try {
    const jsonData = fs.readFileSync('sessoes_regiflex.json', 'utf8');
    sessoesData = JSON.parse(jsonData);
  } catch (error) {
    console.error('‚ùå Erro ao ler arquivo sessoes_regiflex.json:', error.message);
    console.log('üí° Certifique-se de ter executado o script Python primeiro!');
    return;
  }
  
  // Mapear IDs antigos para novos
  const idsReferencia = JSON.parse(fs.readFileSync('ids_referencia.json', 'utf8'));
  
  const mapaPacientes = {};
  idsReferencia.pacientes.forEach((p, index) => {
    if (index < pacientes.length) {
      mapaPacientes[p.id] = pacientes[index].id;
    }
  });
  
  const mapaPsicologos = {};
  idsReferencia.psicologos.forEach((id, index) => {
    if (index < psicologos.length) {
      mapaPsicologos[id] = psicologos[index].id;
    }
  });
  
  // Atualizar IDs nas sess√µes
  const sessoesAtualizadas = sessoesData
    .filter(s => mapaPacientes[s.paciente_id] && mapaPsicologos[s.psicologo_id])
    .map(s => ({
      paciente_id: mapaPacientes[s.paciente_id],
      psicologo_id: mapaPsicologos[s.psicologo_id],
      data_hora: s.data_hora,
      duracao_minutos: s.duracao, // Alterado de 'duracao' para 'duracao_minutos'
      tipo_sessao: s.tipo, // Alterado de 'tipo' para 'tipo_sessao'
      // modalidade: s.modalidade, // Removido pois n√£o existe na tabela sessoes
      status: s.status,
      // valor: s.valor, // Removido pois n√£o existe na tabela sessoes
      observacoes: s.observacoes
    }));
  
  // Importar em lotes de 100
  const BATCH_SIZE = 100;
  let totalImportadas = 0;
  
  for (let i = 0; i < sessoesAtualizadas.length; i += BATCH_SIZE) {
    const batch = sessoesAtualizadas.slice(i, i + BATCH_SIZE);
    
    try {
      const { data, error } = await supabase
        .from('sessoes')
        .insert(batch)
        .select();
      
      if (error) throw error;
      
      totalImportadas += data.length;
      console.log(`   Importadas ${totalImportadas}/${sessoesAtualizadas.length} sess√µes...`);
    } catch (error) {
      console.error(`‚ùå Erro ao importar lote ${i / BATCH_SIZE + 1}:`, error.message);
    }
  }
  
  console.log(`‚úÖ Total de ${totalImportadas} sess√µes importadas com sucesso!`);
}

async function verificarDados() {
  console.log('\nüìä Verificando dados importados...');
  
  try {
    const { count: countPsicologos } = await supabase
      .from('usuarios')
      .select('*', { count: 'exact', head: true });
    
    const { count: countPacientes } = await supabase
      .from('pacientes')
      .select('*', { count: 'exact', head: true });
    
    const { count: countSessoes } = await supabase
      .from('sessoes')
      .select('*', { count: 'exact', head: true });
    
    const { data: statusDist } = await supabase
      .from('sessoes')
      .select('status');
    
    const statusCount = statusDist.reduce((acc, s) => {
      acc[s.status] = (acc[s.status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('\nüìà RESUMO DA IMPORTA√á√ÉO:');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log(`Psic√≥logos: ${countPsicologos}`);
    console.log(`Pacientes: ${countPacientes}`);
    console.log(`Sess√µes: ${countSessoes}`);
    console.log('\nDistribui√ß√£o por Status:');
    Object.entries(statusCount).forEach(([status, count]) => {
      const percent = ((count / countSessoes) * 100).toFixed(1);
      console.log(`  ${status}: ${count} (${percent}%)`);
    });
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar dados:', error.message);
  }
}

// ====== EXECU√á√ÉO PRINCIPAL ======

async function main() {
  console.log('üöÄ INICIANDO IMPORTA√á√ÉO DE DADOS - RegiFlex');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  // Perguntar se deseja limpar dados existentes
  console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° limpar todos os dados existentes!');
  console.log('   Pressione Ctrl+C para cancelar ou Enter para continuar...');
  
  // Aguarda o usu√°rio pressionar Enter
  await new Promise(resolve => {
    process.stdin.once('data', () => {
      process.stdin.pause(); // Pausa a leitura para evitar m√∫ltiplos inputs
      resolve();
    });
  });
  
  try {
    // 1. Limpar dados existentes
    await limparDados();
    
    // 2. Criar psic√≥logos
    const psicologos = await criarPsicologos();
    if (psicologos.length === 0) {
      console.error('\n‚ùå Falha ao criar psic√≥logos. Abortando...');
      return;
    }
    
    // 3. Criar pacientes
    const pacientes = await criarPacientes();
    if (pacientes.length === 0) {
      console.error('\n‚ùå Falha ao criar pacientes. Abortando...');
      return;
    }
    
    // 4. Importar sess√µes
    await importarSessoes(pacientes, psicologos);
    
    // 5. Verificar resultado
    await verificarDados();
    
    console.log('\n‚úÖ IMPORTA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   1. Acesse o dashboard do RegiFlex');
    console.log('   2. Verifique se os dados aparecem corretamente');
    console.log('   3. Inicie o treinamento do modelo de IA');
    
  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE A IMPORTA√á√ÉO:', error);
  }
  
  process.exit(0);
}

// Executar
main();
